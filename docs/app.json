[{"name": "app.py", "content": "import plotly.express as px\nimport seaborn as sns\nfrom shiny import reactive\nfrom shiny.express import render, input, ui\nfrom shinywidgets import render_plotly\nimport palmerpenguins # This package provides the Palmer Penguins dataset\n\n# ----------------------------------------------------\n# Get the Data\n#-----------------------------------------------------\n\n# ALWAYS familiarize yourself with the dataset you are working with first.\n# Column names for the penguins dataset include:\n# - species: penguin species (Chinstrap, Adelie, or Gentoo)\n# - island: island name (Dream, Torgersen, or Biscoe) in the Palmer Archipelago\n# - bill_length_mm: length of the bill in millimeters\n# - bill_depth_mm: depth of the bill in millimeters\n# - flipper_length_mm: length of the flipper in millimeters\n# - body_mass_g: body mass in grams\n# - sex: MALE or FEMALE\n\n# Load the dataset into a pandas DataFrame.\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\n\n\n\n# -----------------------------------------------------\n# Define User Interface (ui)\n# -----------------------------------------------------\n\nui.page_opts(title=\"Pinkston's Palmer Penguins PyShiny Plots\", fillable=True)\n\n# Add a Shiny UI sidebar for user interaction\n# Use the ui.sidebar() function to create a sidebar\n# Set the open parameter to \"open\" to make the sidebar open by default\nwith ui.sidebar(position=\"right\", open=\"open\", bg=\"#d5d8dc\"):\n    # Use the ui.h2() function to add a 2nd level header to the sidebar\n    ui.h2(\"Sidebar\")\n\n    # Use ui.input_selectize() to create a dropdown input to choose a column\n    # pass in three arguments:\n    ui.input_selectize(\n        \"selected_attribute_list\",\n        \"Select an Attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"])\n\n    # Use ui.input_numeric() to create a numeric input for the number of Plotly histogram bins\n    #   pass in two arguments:\n    ui.input_numeric(\n        \"plotly_bin_count\",\n        \"# of Plotly Histogram Bins\",\n        value=10)\n\n    # Use ui.input_slider() to create a slider input for the number of Seaborn bins\n    #   pass in four arguments:\n    ui.input_slider(\n        \"seaborn_bin_count\",\n        \"# of Seaborn Bins\",\n        min=1,\n        max=100,\n        value=10)\n\n    # Use ui.input_checkbox_group() to create a checkbox group input to filter the species\n    #   pass in five arguments:\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Filter by Species\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        inline=True)\n\n    # Use ui.hr() to add a horizontal rule to the sidebar\n    ui.hr()\n\n    # Use ui.a() to add a hyperlink to the sidebar\n    #   pass in two arguments:\n    ui.a(\n        \"My GitHub Repository\",\n        href=\"https://github.com/james-0177/cintel-02-data/tree/main\",\n        target=\"_blank\")\n\n# Main Content\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_species():\n    selected_species=input.selected_species_list()\n    if selected_species:\n        filtered_df=penguins_df[penguins_df['species'].isin(selected_species)]\n    else:\n        filtered_df=penguins_df\n    return filtered_df\n\n# Display Data Table and Data Grid\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Data Table of Penguin Species\")\n        @render.data_frame\n        def table():\n            return render.DataTable(data=filtered_species())\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Data Grid of Penguin Species\")\n        @render.data_frame\n        def grid():\n             return render.DataGrid(data=filtered_species())\n\n# Display Plotly and Seaborn Histograms\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Histogram: Distribution of Penguins by Selected Attribute\")\n        @render_plotly\n        def plot1():\n            selected_attribute=input.selected_attribute_list()\n            return px.histogram(filtered_species(), x=selected_attribute, color=\"species\", nbins=input.plotly_bin_count())\n            \n    with ui.card(full_screen=True):\n        ui.card_header(\"Seaborn Histogram: Distribution of Penguins by Flipper Length\")\n        @render.plot\n        def plot2():\n            return sns.histplot(data=filtered_species(), x=\"flipper_length_mm\", hue=\"species\", bins=input.seaborn_bin_count())\n\n# Display Plotly Scatterplot\nwith ui.card(full_screen=True):\n    ui.card_header(\"Plotly Scatterplot: Species\")\n    @render_plotly\n    def plotly_scatterplot():\n        return px.scatter(data_frame=filtered_species(), x=\"bill_length_mm\", y=\"body_mass_g\", color=\"species\", hover_name=\"island\", symbol=\"sex\")\n", "type": "text"}]